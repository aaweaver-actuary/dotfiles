[project]
requires-python = ">=3.8"

[tool.ruff]
exclude = [".venv"]
line-length = 88
fix = true

[tool.ruff.format]
docstring-code-format = true # Enable reformatting of code snippets in docstrings.
docstring-code-line-length = 75 # Format all docstring code snippets with a line length of 75
skip-magic-trailing-comma = true 

[tool.ruff.lint]
dummy-variable-rgx = "^_$" # Only ignore variables named "_"
extend-select = ["B", "Q"] # On top of the default `select` (`E`, `F`), enable flake8-bugbear (`B`) and flake8-quotes (`Q`).
extend-fixable = ["B"] # Enable fix for flake8-bugbear (`B`), on top of any rules specified by `fixable`.
unfixable = ["F401"] # Disable fix for unused imports (`F401`).

[tool.ruff.lint.extend-per-file-ignores]
# Ignore `E402` and `F401` in all `__init__.py` files.
"__init__.py" = ["E402", "F401"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
mypy-no-implicit-optional = true

[tool.ruff.lint.flake8-import-conventions]
# Declare the banned `from` imports. These may be imported using `import`, but not `from`.
# So "from pandas import DataFrame" is banned, but "import pandas as pd" is allowed.
banned-from = ["pandas", "numpy", "matplotlib", "polars", "polars.selectors", "plotly.express", "plotly.graph_objects"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"polars" = "pl" # Allow "pl" as an alias for "polars"
"polars.selectors" = "cs" # Allow "cs" as an alias for "polars.selectors" -- this follows API conventions in Polars
"plotly.express" = "px" # Allow "px" as an alias for "plotly.express"
"plotly.graph_objects" = "go" # Allow "go" as an alias for "plotly.graph_objects"

[tool.ruff.lint.flake8-pytest-style]
# @pytest.fixture functions should not have parentheses in their names
# (e.g. `@pytest.fixture()` is not allowed).
fixture-parentheses = false 

# @pytest.mark.parametrize parameter names should be a comma-separated list
# (e.g. `@pytest.mark.parametrize("a, b", [(1, 2), (3, 4)])` is allowed, but
# `@pytest.mark.parametrize("a b", [(1, 2), (3, 4)])` is not).
parametrize-names-type = "csv"

[tool.ruff.lint.pydocstyle]
convention = "numpy" # Use the numpy docstring convention

[tool.ruff.lint.pylint]
max-args = 10 # Maximum number of arguments for functions and methods





